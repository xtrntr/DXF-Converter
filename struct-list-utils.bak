#lang racket

(require "structs.rkt")

(provide struct-list->string-list
         filter-struct-list
         get-relevant-list
         select-highlighted
         highlight-path
         unselect-all
         delete-selected)

(define (struct-list->string-list struct-lst)
  (map (lambda (x) (capitalize (symbol->string (object-name x)))) struct-lst)
  #|(map (lambda (x) (if (path? x)
                       (struct-list->string-list (path-entities x))
                       (symbol->string (object-name x)))) struct-lst)|#)

(define (capitalize str)
  (let* ((dissected (string->list str))
         (first-letter (char-upcase (car dissected)))
         (capitalized (list->string (append (list first-letter) (cdr dissected)))))
    capitalized))

(define (filter-struct-list struct-list cond)
  (for/list ([i struct-list] 
             #:when (cond i))
    i))

(define (get-relevant-list)
      (filter-struct-list search-list (lambda (i) (and (entity-visible i) (entity-selected i)))))
    
(define (select-highlighted)
  (lambda (x) 
    (when (path? x) 
      (filter-struct-list (path-entities x) (select-highlighted))
      (unless (empty? (filter-struct-list (path-entities x) entity-selected))
        (set-entity-selected! x #t)
        (set-entity-highlighted! x #f)))
    (when (entity-highlighted x)
      (set-entity-selected! x #t)
      (set-entity-highlighted! x #f))))

(define (highlight-path)
  (define (any-entity-highlighted? lst)
    (cond ((empty? lst) #f)
          ((entity-highlighted (car lst)) #t)
          (else (any-entity-highlighted? (cdr lst)))))
  (map (lambda (x) (when (any-entity-highlighted? (path-entities x))
                     (foldl set-entity-highlighted! #t (path-entities x))))
       (filter-struct-list search-list path?)))

(define (unselect-all)
  (lambda (x) 
    (when (path? x) (set-entity-selected! x #f) (filter-struct-list (path-entities x) (unselect-all)))
    (set-entity-selected! x #f)))

(define (delete-selected)
  (lambda (x) 
    (when (and (path? x) (entity-selected x)) (set-entity-visible! x #f) (set-entity-selected! x #f) (filter-struct-list (path-entities x) (delete-selected)))
    (when (entity-selected x) (set-entity-visible! x #f) (set-entity-selected! x #f))))