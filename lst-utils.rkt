#lang typed/racket

(require "structs.rkt"
         "utils.rkt")

(provide (all-defined-out))

(: structs-to-strings (-> Entities (Listof String)))
(define (structs-to-strings struct-lst)
  (map (lambda ([x : Entity]) (capitalize (symbol->string (cast (object-name x) Symbol)))) struct-lst))

(: get-selected (-> Entities Entities)) 
(define (get-selected lst)
  (filter (lambda ([i : Entity]) (and (entity-visible i) (entity-selected i))) lst))

(: get-visible (-> Entities Entities)) 
(define (get-visible lst)
  (filter (lambda ([i : Entity]) (entity-visible i)) lst))

(: select-highlighted (-> Entities Void))
(define (select-highlighted lst)
  (: select (-> Entity Void))
  (define (select x)
    (set-entity-selected! x #t)
    (set-entity-highlighted! x #f))
  (unless (empty? lst)
    (let ((current (first lst)))
      (cond ((path? current)
             (select-highlighted (path-entities current))
             (unless (empty? (filter entity-selected (path-entities current)))
               (select current))
             (select-highlighted (cdr lst)))
            (else (when (entity-highlighted current) 
                    (select current))
                  (select-highlighted (cdr lst)))))
    (void)))

(: highlight-lst (-> Entities Void))
(define (highlight-lst lst)
  (: any-entity-highlighted? (-> Entities Boolean))
  (define (any-entity-highlighted? lst)
    (cond ((empty? lst) #f)
          ((entity-highlighted (car lst)) #t)
          (else (any-entity-highlighted? (cdr lst)))))
  (let loop : Void
    ([x : (Listof path) (filter path? lst)])
    (cond ((empty? x) (void))
          (else (when (any-entity-highlighted? (path-entities (car x)))
                              (map (lambda ([i : Entity]) (set-entity-highlighted! i #t)) (path-entities (car x))))
                (loop (cdr x))))))

(: unselect-all (-> Entities Void))
(define (unselect-all lst)
  (unless (empty? lst)
    (let ((current (first lst)))
      (cond ((path? current)
             (set-entity-selected! current #f)
             (unselect-all (path-entities current))
             (unselect-all (cdr lst)))
            (else (set-entity-selected! current #f)
                  (unselect-all (cdr lst))))))
  (void))

(: delete-selected (-> Entities Void))
(define (delete-selected lst)
  (: delete (-> Entity Void))
  (define (delete x)
    (set-entity-selected! x #f)
    (set-entity-visible! x #f))
  (unless (empty? lst)
    (let ((current (first lst)))
      (cond ((and (path? current) (entity-selected current))
             (delete current)
             (delete-selected (path-entities current))
             (delete-selected (cdr lst)))
            ((entity-selected current)
             (delete current)
             (delete-selected (cdr lst)))
            (else (delete-selected (cdr lst)))))
    (void)))