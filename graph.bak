#lang racket

(require graph ;stephen chang's graph library
         "structs.rkt"
         "utils.rkt") 

(provide (all-defined-out))

;; creates a hash map of
;;key -> node
;;value -> entities connected to that node
(define (make-node-hs entity-lst)
  (let ([hashy (hash)]
        [add-key-pair
         (lambda (entity hashy)
           (let ([ns (list (get-entity-start entity) (get-entity-end entity))]
                 [val (list entity)])
             (let loop
               ([keys ns]
                [ht hashy])
               (cond ([empty? keys] ht)
                     (else
                      (loop (rest keys)
                            (if (hash-has-key? ht (first keys))
                                (hash-set ht (first keys) (append (hash-ref ht (first keys)) val)) 
                                (hash-set ht (first keys) val))))))))])
    (let loop
      ([lst entity-lst]
       [ht hashy])
      (cond ([empty? lst] ht)
            (else
             (loop (rest lst)
                   (add-key-pair (first lst) ht)))))))

;; we can use node-equal here to check for similar keys
;; (get-duplicate-nodes (hash-keys node-ht)) then link the 2 groups together.
(define (sort-from-nodes node-lsts node-ht)
  (map
   (lambda (node-lst)
     (remove-duplicates (flatten
                         (map
                          (lambda (node) (hash-ref node-ht node))
                          node-lst))))
   node-lsts))

(define (make-graph entity-lst)
  (unweighted-graph/undirected
   (map (lambda (entity) (list (get-entity-start entity) (get-entity-end entity)))
        entity-lst)))

;; the for*/list could be more efficient
(define (link lsts n-eq?)
  (define node-lsts (map (lambda (node-lst) (if (list? node-lst) node-lst (list node-lst))) lsts))
  (define (lst-connected? lst1 lst2)
    (not (empty? (for*/list ([n1 lst1]
                             [n2 lst2]
                             #:when (n-eq? n1 n2))
                            (list n1 n2)))))
  (let loop
      ([acc '()]
       [checked '()] ; put into checked when you reach the end of unchecked from current
       [unchecked (rest node-lsts)] ; 
       [current (first node-lsts)])
      (cond [(and (empty? unchecked) (empty? checked)) (cons current acc)]
            [(empty? unchecked) (loop (cons current acc)
                                      '()
                                      (rest checked)
                                      (first checked))]
            [(lst-connected? current (first unchecked)) (loop acc
                                                              '()
                                                              (append checked (rest unchecked))
                                                              (append current (first unchecked)))]
            [else (loop acc
                        (cons (first unchecked) checked)
                        (rest unchecked)
                        current)])))
                               
(define (group-entities entity-lst n-eq?)
  (let* ([edges (entities->edges entity-lst)] ;(Listof (List node node))
         [graph (unweighted-graph/undirected edges)]
         [node-lsts (cc graph)]
         [node-hash (make-node-hs entity-lst)]
         [node-lsts2 (link node-lsts n-eq?)]
         [entity-grps (sort-from-nodes node-lsts2 node-hash)]
         [sub-graphs (map make-graph entity-grps)])
    ;(display "before : ")
    ;(display (length node-lsts))
    ;(newline)
    ;(display "after : ")
    ;(display (length node-lsts2))
    ;(newline)
    entity-grps))

(define (edges->entities edge-lst entity-lst)
  (for/list ([edge edge-lst])
    ((lambda (entity) 
       (if (and (equal? (first edge) (get-entity-start entity))
                (equal? (second edge) (get-entity-end entity)))
           entity
           (reverse-entity entity)))
     (findf 
      (lambda (entity)
        (or (and (equal? (first edge) (get-entity-start entity))
                 (equal? (second edge) (get-entity-end entity)))
            (and (equal? (second edge) (get-entity-start entity))
                 (equal? (first edge) (get-entity-end entity)))))
      entity-lst))))

;; (-> node Entities (Listof Entities))
(define (reorder-entities start-n entity-lst)
  (let* ([edges (entities->edges entity-lst)]
         [lst-of-e-lsts (reorder-edges start-n edges)]
         [new-entities (for/list ([e-lst lst-of-e-lsts])
                                 (edges->entities e-lst entity-lst))])
    new-entities))

(define (edge-connected? e1 e2)
  (or (equal? (first e1) (first e2))
      (equal? (first e1) (second e2))
      (equal? (second e1) (first e2))
      (equal? (second e1) (second e2))))

;e refers to edge
(define (e-find-edges start-e e-lst)
  (filter (lambda (e) (edge-connected? start-e e)) e-lst))

;n refers to node
(define (n-find-edges n e-lst)
  (filter (lambda (e) (or (equal? n (first e))
                          (equal? n (second e)))) e-lst))

(define (n-in-edge? edge n)
  (or (= (first edge) n)
      (= (second edge) n)))

(define (get-other-n edge n)
  (cond [(equal? (first edge) n) (second edge)]
        [(equal? (second edge) n) (first edge)]
        [else (error "node not found in edge" n edge)]))

(define (reorder-edges start-n edge-lst)
  (let ([hashy (make-hash)])
    (let loop
        ([acc '()]
         [e-lst edge-lst]
         [curr-n start-n]
         [curr-path '()])
      (if (empty? e-lst) 
          (if (empty? curr-path)
              acc
              (cons curr-path acc))
          (let ([edges (n-find-edges curr-n e-lst)])
            (cond 
              ;; backtracking
              [(and (empty? curr-path) (empty? edges)) (let ([prev-node (first (hash-ref hashy curr-n))])
                                                         (hash-set! hashy curr-n
                                                                    (remove prev-node (hash-ref hashy curr-n)))
                                                         (display "dead end, moving from current node : ")
                                                         (display curr-n)
                                                         (display " to previous node : ")
                                                         (display prev-node)
                                                         (newline)
                                                         (loop acc
                                                               e-lst
                                                               prev-node
                                                               curr-path))]
              ;; dead end
              [(empty? edges) (let ([prev-node (first (hash-ref hashy curr-n))])
                                (hash-set! hashy curr-n
                                           (remove prev-node (hash-ref hashy curr-n)))
                                (display "dead end, moving from current node : ")
                                (display curr-n)
                                (display " to previous node : ")
                                (display prev-node)
                                (newline)
                                (loop (cons (reverse curr-path) acc)
                                      e-lst
                                      prev-node
                                      '()))]
              ;; traversing one way
              [(= 1 (length edges)) (let ([next-n (get-other-n (first edges) curr-n)])
                                      (if (hash-has-key? hashy next-n)
                                          (hash-set! hashy next-n
                                                     (cons curr-n (hash-ref hashy next-n)))
                                          (hash-set! hashy next-n
                                                     (list curr-n)))
                                      (display "moving from current node : ")
                                      (display (let ([n curr-n])
                                                 (cons (node-x n) (node-y n))))
                                      (display " to next node : ")
                                      (display (let ([n next-n])
                                                 (cons (node-x n) (node-y n))))
                                      (newline)
                                      (loop acc
                                            (remove (first edges) e-lst)
                                            next-n
                                            (cons (first edges) curr-path)))]
              ;; at a junction/fork
              [else (let ([next-n (get-other-n (first edges) curr-n)])
                        (if (hash-has-key? hashy next-n)
                            (hash-set! hashy next-n
                                       (cons curr-n (hash-ref hashy next-n)))
                            (hash-set! hashy next-n
                                       (list curr-n)))
                      (display "possible paths : ")
                      (for ([edge edges])
                           (display edge)
                           (display " , "))
                      (newline)
                      (display "moving from current node : ")
                      (display curr-n)
                      (display " to next node : ")
                      (display next-n)
                      (newline)
                      (loop acc
                            (remove (first edges) e-lst)
                            next-n
                            (cons (first edges) curr-path)))]))))))

#|
(define (do-optimization lst node-eq?)
    (let loop ([start (node 0 0)]
               [entity-lst lst]
               [acc '()]
               [individuals '()])
      (if (empty? entity-lst)
          (append (reverse acc) individuals) ;cuz order of the list matters here
          (let* ([groups (group-entities entity-lst)]
                 [start-n (nn start (flatten (map get-start/end-nodes groups)))]
                 [lst-to-reorder (get-belonging-list start-n groups)]
                 [base-elements (get-base-elements lst-to-reorder)]
                 ;we actually want to remove one instance of each element in base elements, not all instances
                 [rest-of-lst (remove* base-elements entity-lst)]
                 [nodes (entities->nodes base-elements)]
                 [single-entity? (= (length lst-to-reorder) 1)]
                 [closed-pattern? (closed-path? nodes)]
                 [open-pattern? (open-path? nodes)]
                 [tree-pattern? (tree-path? nodes)])
            ;possible bug where entity start and end node are equal to each other because they are too close
            ;need to fix node-equal?
            (cond [single-entity? (let ([x (first lst-to-reorder)])
                                    (loop (if (node-eq? start-n (get-entity-start x)) (get-entity-end x) (get-entity-start x))
                                          rest-of-lst
                                          (cons (reorder-entity start-n x) acc)
                                          individuals))]
                  [open-pattern? (let ([new-path (make-selected (make-path (reorder-open-path start-n base-elements)))])
                                   (loop (get-entity-end new-path)
                                         rest-of-lst
                                         (cons new-path acc)
                                         individuals))]
                  [closed-pattern? (let ([new-path (make-selected (make-path (reorder-closed-path start-n base-elements #f)))])
                                     (loop (get-entity-end new-path)
                                           rest-of-lst
                                           (cons new-path acc)
                                           individuals))]
                  [tree-pattern? (loop start-n
                                       rest-of-lst
                                       acc
                                       (append lst-to-reorder individuals))])))))
|#